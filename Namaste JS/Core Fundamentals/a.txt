Array 
let a = []

a.length // counts the length of arr
a.push("value") // adds at the end
a.unshift("value") // adds in front of the array
a.pop() //removes from end
a.shift() // removes from the start
a.sort() //sorts the array and updates the OG too
a.reverse() // reverses and updates the OG

[
a.splice(1param, 2param, 3 params)  // to remove something from the middle - Updates the og array
takes 3 params - 1 and 2 are index, 1st is the index from where we begin deletion. 
2nd Param = Number of items to delete.
3rd param is the values that we add in place of the deleted values.
a.splice(2,4) // will delete from 2nd index and will delete 4 items from 2nd index and will modify a.

let array = ['today', 'was', 'not', 'so', 'great'];
array.splice(2, 2); //array would have the value ['today', 'was', 'great'].
]
[
a.slice() // slice behaves just like splice but it doesnt update the OG array. It takes the value to new array
takes 2 params -> (param1 , param2 )
param1 = from where to start deletion/extraction
param2=  where to stop deletion/extraction - but will not include this.
a.slice(2,4) // will remove from 2nd index just before 4th index. 

let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
let todaysWeather = weatherConditions.slice(1, 3);  // ['snow', 'sleet']
]

...Spread Operator-> Copies the whole array to another array. (shallow Copy)
let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];

//DEEP Copy
let obj1 = {}

let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
thatArray would have the value ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander'].

indexOf() // helps us to check for the index of an element in an array. It either returns the ele if found and -1 if no value.
// will give the index of 1st occurrence of any ele.
let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];
fruits.indexOf('dates'); // -1
ruits.indexOf('oranges'); // 2

JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results 
(such as every(), forEach(), map(), etc.)


// OBJECTS
But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. 
One uses the hasOwnProperty() method and the other uses the 'in' keyword. 
users.hasOwnProperty('Alan');
'Alan' in users;
Both of these would return true.

  if(userObj.hasOwnProperty('Alan') && userObj.hasOwnProperty('Jeff') && userObj.hasOwnProperty('Sarah') &&userObj.hasOwnProperty('Ryan') ){
    return true;
  }

  else return false



will read this today -> pushing for streak.

====array===
const a = [1,2,3,5,6,10,33,11,99];

// console.log(a.sort((x,y) => x-y))
// console.log(a.pop())
// console.log(a.pop())


a.splice(2,4);
console.log(a)
===============

=====object=====

let myObject = {
    name: "Alice",
    age: 30
};
console.log(myObject.hasOwnProperty('name'));  // true


for (let keys in myObject){   // iterates over keys one by one!!
    console.log(keys)
} 
//
name
age


const key = Object.keys(myObject);   // returns an array
console.log(key)  // [ 'name', 'age' ]
============================================================

