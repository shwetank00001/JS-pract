NEXT JS NOTES

What is nextjs? 
Next js is a react framework used to build fullstack web applications.


why use Nextjs? 
react is a UI library and fullstack isnt possible in it.

features we can have in nextjs
-routing
-data feching
-optimising
-bundling
-compiling

Why learn Nextjs -> CAn make production ready applications
Features out of the box ->
1. Routing
2.  Api Routes
3. Rendering -> this supports both server side and client side Rendering i.e better SSO and performance.
4. Styling -> css and tailwinds


NOW THE FILE DISTRIBUTION IN Nextjs (IMP)

next.config -> next js settings
ts.config -> Ts settings
esling file
ESLint is a static code analysis tool for JavaScript and JSX that helps identify and fix problems in your code, improving code quality and consistency by enforcing coding standards and catching potential bugs early in development

src > app -> this app folder is the app router
favicorn - browser tab icon
layout.tsx -> shared UI elements across all pages
paget.tsx -> creates what u see at LH:3000;

CORE CONCEPT - Routing
Next js has a file-system based routing.
meaning -> URLs behave exactly like how you manage files and folders
Three important conventions for routing
1. All routes must live inside the APP folder.
2. ROute files name should be "page.js" or "page.tsx"
3. Each folder represents the segment of the url path

So by using these 3 steps -> The file automatically becomes available as a route.

Scenario 1- Let's make a scenario where the user visits the homepage => '/' URLs 
c:\Users\Shwetank\AppData\Local\Packages\MicrosoftWindows.Client.CBS_cw5n1h2txyewy\TempState\ScreenClip\{23F40DA6-76D8-4631-9011-D7D4EB50EB7E}.png
app
├── about
│   └── page.tsx
├── profile
│   └── page.tsx
├── layout.tsx
└── page.tsx

Lets make a blog URL with blog/blog1 and blog/blog2
app
├── about
│   └── page.tsx
├── profile
│   └── page.tsx
├── blog
│   ├── blog1
│   │   └── page.tsx
│   ├── blog2
│   │   └── page.tsx
├── layout.tsx
└── page.tsx
